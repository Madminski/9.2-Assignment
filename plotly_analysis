import pandas as pd
import numpy as np
import plotly.express as px

# Generating synthetic data (if not already done)
np.random.seed(42)  # For reproducibility
n_samples = 500
dates_before = pd.date_range(start='2024-05-01', end='2024-05-15', periods=n_samples//2)
dates_after = pd.date_range(start='2024-06-01', end='2024-06-15', periods=n_samples//2)
dates = np.concatenate([dates_before, dates_after])

data = {
    'RQSTDTTM': dates,
    'BEGINDTTM': dates + pd.to_timedelta(np.random.randint(1, 5, n_samples), unit='m'),
    'ENDDTTM': dates + pd.to_timedelta(np.random.randint(5, 15, n_samples), unit='m'),
    'SECONDS': np.random.randint(30, 300, n_samples),
    'MINUTES': np.random.randint(1, 5, n_samples),
    'PRCSNAME': np.random.choice([f'JOB_{i}' for i in range(1, 167)], n_samples),
    'RUNSTATUSDESC': np.random.choice(['Success', 'Error'], n_samples, p=[0.9, 0.1]),
    'PRCSINSTANCE': np.random.randint(100000, 999999, n_samples),
    'OPRID': np.random.choice(['mcurtis', 'jdoe', 'asmith', 'bjohnson', 'ewilliams'], n_samples),
    'RUNCNTLID': np.random.choice(['EXTERNAL_PAYMENTS', 'INTERNAL_PAYMENTS'], n_samples)
}

df = pd.DataFrame(data)

# Calculate durations and request to begin time
df['DURATION'] = (df['ENDDTTM'] - df['BEGINDTTM']).dt.total_seconds() / 60  # Convert to minutes
df['UPGRADE'] = df['RQSTDTTM'] >= pd.Timestamp('2024-06-01')

# Calculate average pre and post-upgrade times for each job
pre_upgrade = df[df['UPGRADE'] == False].groupby('PRCSNAME')['DURATION'].mean().reset_index()
post_upgrade = df[df['UPGRADE'] == True].groupby('PRCSNAME')['DURATION'].mean().reset_index()

# Merge pre and post-upgrade data
comparison = pd.merge(pre_upgrade, post_upgrade, on='PRCSNAME', suffixes=('_Pre', '_Post'))
comparison['Difference (minutes)'] = comparison['DURATION_Post'] - comparison['DURATION_Pre']
comparison['Improvement (%)'] = (comparison['Difference (minutes)'] / comparison['DURATION_Pre']) * -100

# Add a column for coloring the scatter plot
comparison['Change'] = comparison['Difference (minutes)'].apply(lambda x: 'Improvement' if x < 0 else 'Regression' if x > 0 else 'No Change')

# Create scatter plot
fig = px.scatter(comparison, x='DURATION_Pre', y='DURATION_Post', color='Change',
                 title='Job Completion Times Pre vs. Post Upgrade',
                 labels={'DURATION_Pre': 'Pre-Upgrade Time (minutes)', 'DURATION_Post': 'Post-Upgrade Time (minutes)'},
                 hover_data=['PRCSNAME', 'Difference (minutes)', 'Improvement (%)'])

# Add line of equality (y=x) to show no change
fig.add_shape(
    type='line',
    line=dict(dash='dash'),
    x0=0, y0=0,
    x1=comparison['DURATION_Pre'].max(),
    y1=comparison['DURATION_Pre'].max()
)

# Show plot
fig.show()
